
			   Дабораторнаяаботы № 3
	  Изучение таймера и последовательного порта.

 1.Краткие сведения

1.1.  Таймеры/счетчики микроконтроллера
 Микроконтроллер  I8051 Включает два независимых счетчика  TС0 и TС1.  Для управления режимом их работы служит регистр режима ТМОD
Содержимое счетчиков и регистра TMOD может быть в любой момент программно изменено( н.п. командой  MOV TL0,data) или прочитано (н.п. командой  MOV  А,TL0).Регистр режима  должен быть установлен до  фактического использования счетчиков в прикладной  программе и задает  способ изменения состояния счетчиков.   
Разряды   TMOD.6 и TMOD.2 (обозначаемые  как С/T 1 и С/T 0)  задают сигналы, которые используются как счетные импульсы счетчиков TC1   и TC0  соответственно. Если  бит  С/Tх установлен в единицу (здесь и далее "х" -номер счетчика), то содержимое счетчика инкрементируется под воздействием перехода из  единицы в ноль внешнего входного сигнала подаваемого на вывод микроконтроллера  Тх. Если С/Тх  сброшен, то содержимое счетчика меняется в конце каждого машинного цикла, то есть через каждые 12 периодов резонато

ра.
 Изменение состояния счетчика блокируется, если разряд TRx  ( TCON.6 для ТС1 и TCON.4   для ТС0) сброшен, и разрешается  при TRx=1.  Кроме того  возможна блокировка счета внешним сигналом, подаваемым на вход INTx. Блокировка за счет внешнего сигнала разрешена, если разряд GATEx  (TMOD.7  для ТС1 и TCON.3   для ТС0) установлен в единицу. В этом случае ноль на входе INTx  блокирует счетчик, а единица - разрешает счет. Если GATEx=0, вход INTx не влияет на работу счетчика.
За счет установки в регистре ТМОD  битов  0,1, 4 и 5 счетчики таймеров могут быть настроены на работу в следующих конфигурациях :
Режим 0 ( для ТС1    ТMOD.5=0, TMOD.4=0 ; для ТС0    ТMOD.1=0, TMOD.0=0)-
Счеткик/таймер разделен на две части TCHx и TCLx. На счетный вход TCLx подаются  импульсы подлежащие счету, а вход переноса его пятого разряда подается на счтный вход TCHx. Перенос из старшего разряда TCHx фиксируется в TFx. Таким образом в структуре таймера, настроенного в режим 0  формируется 13 -битовый счетчик.  
Режим 1 ( для ТС1    ТMOD.5=0, TMOD.4=1 ; для ТС0    ТMOD.1=0, TMOD.0=1) - подобен предыдущему, но перенос в ТСHx при переносе из старшего разряда TCLx Таким образом в структуре таймера, настроенного в режим 1  формируется 16 -битовый счетчик.  
Режим 2 ( для ТС1    ТMOD.5=1, TMOD.4=0 ; для ТС0    ТMOD.1=1, TMOD.0=0)- режим автозагрузки. ТСНх не изменяется, а ТСLx работает в режиме счетчика, но про его переполнении в него переписывается код из THx . Этот режим особенно удобен в случаях необходимости взапуска какой либо программы с наперед заданной частотой.
Режим 3 ( для ТС1    ТMOD.5=1, TMOD.4=1 ; для ТС0    ТMOD.1=1, TMOD.0=1)-  для ТС1  означает его блокировку. Для ТС0 установка режима 3 эквивалентно егл разделение на два независимых восьмиразрадных счетчика, причем работу ТL0 определяют управляющие биты С/T0, GATE0, TR0,  а TH0 может работать только в режиме подсчета машиных циклов с возможностью блокировки  битом TR1.   При переполнении ТL0 устанавливается флаг ТF0,  а п ри переполнении ТH0 устанавливается флаг ТF1.  Если TC0 установлен в режим 3, то TC1 

 может использоваться в любом другом  режиме, но при этом исключается иозможность управления  его счетом через бит TR1  и формирование запросов прерываний от TC1.
Флаги переполнения воздействуют на внутренний контроллер прерываний. Если прерывания от  соответствующего таймера разрешены, и в данный момент нет обслуживания прерывания более высокого приоритета, вызывается прграмма обслеживания прерываний от таймера. Флаг переполнения сбрасывается аппаратурно в момент перехода на программу обслуживания .

1.3. Последовательный порт
Последовательный порт микроконтроллеров семейства 8051 работает в дуплексном режиме. Прием и передача могут осуществлятся одновременно. Узел приемника порта автоматически обнаруживает на входе RXD  признак начала передачи, преобразует последовательность  битов, поступающих на этот вход   в байт данных  и размещает его в буфере приемника. После приема каждого байта  устанавливается  бит окончания приема RI (  SCON.0), являющийся сигналом запроса прерываний.  
После программной загрузки  данных в выходной буфер автоматически начинается передача байта. Окончание передачи сигнализируется установкой в единичное состояния флага ТI (SCON.1), что также является сигналом запроса на прерывания.  Флаги запросов, чтобы разрешить очередной обмен через порт, должна программно сбрасываться в программе обслуживания.
Буферы приемники и передатчики имеют одинаковый физический  адрес и логоческое имя SBUF. Но в командах ввода под этим адресом подрезумеваеися входной буфер порта, а в команандах  вывода -выходной.  Запросы  от приемника и передатчика  используют общую линию запроса (по сушеству выходы RI и TI объединены по логике "ИЛИ"). Для определения конкретной причины прерывания программа обслуживания прерываний от порта должна анализировать RI и TI.
Формат передачи по последовательному каналу, а значит и способ обнаружения начала и конца посылки зависят от настройки, выполняемой путем загрузки кода режима в регистр управления и статуса приемо-передатчика SCON.
 Используемый в настоящем цикле лабораторных работ моделировщик не воспроизводит  реальных временных соотношений сигналов,  поступающих на вход последовательного порта RXD и формируемых микроконтроллером при выходе на линии TXD. Моделируется только реакция системы на окончание передачи одного байта данных. Состояние битов управления режимом регистра управления и статуса последовательного порта SCON  не влияют на результат моделирования.  
Остановимся на порядке моделирования входа последовательного порта, которыq следует использовать в настоящей работе. Вход моделируется подобно моделированию входа параллельного порта. Файл последовательности входных данных записыфается как последовательность строк, каждая из которых  представляет очередной принимаемый байт в шестнадцатиричном формате.
Для "подключения" источника к входу последовательногго порта  следует, находясь в командном окне моделировщика, выполнить следуюшее 
а. Выбрать пункт " IO" главного меню симулятора
б. выбрать функцию "Open" подменю
в. На запрос "IO input file" Задать имя файла входных данных в строке "Enter file name"     ( имя 	определено в п.3.5)
 г. на возникший запрос "reply file after EOF" ( повтор входной последовательности после окончания)  	выбрать "YES"
  д. на запрос "IO output file"  нажать "Enter" ( временный отказ)
  е. на запрос "IO Trigger"  ( cпособ синхронизации) выбрать "Cycles" ( задает изменение входа c 	через заданное число машинных циклов микроклнтроллера) и на последующий запрос "IO RATE" 	задать время между вводом двух последовательных  байтов данных. Этот период должен быть не 	меньше чем время обработки предыдущего байта данных.
 ж. на запрос "IO Transfer"  определить формат входных данных (выбрать mapByte) и затем  задать в 	качестве адреса для ввода SBUF. 

Тогда после запуска процедуры моделирования через каждое заданное число циклов  в SBUF заносится новое значение и одновременно устанавливаетя флаг RI.
Подключение файла регистратора к передатчику микроконтроллера вообще не отличается от подобной операции для паралельного порта ( см. лаб.раб 1 и 2) - следует только задать в качестве адреса подключения SBUF. Прерывания от передатчика  последовательного порта моделировщик не воспроизводит. Поэтому чтобы правильно смоделировать процессы при выводе данных через последовательный порт  при выполнении работ рекомендуется  вслед за командой вывода данных на последовательный порт ( например MOV SBUF,A ) разместить 

"фиктивную " команду загрузки неиспользуемого в данной работе  таймера ( путь это Т1)кодом, соответствующим реальному времени выдачи данных через этот порт.  Программа, запескаемая по  прераванию ТF1 должна блокировать прерывание от таймера командой CLR ET1 и установить в единицу бит ТI, чем , собственно и моделируется сигнал об  окончании процесса вывода  данных через порт. После этого выполняется возврат в главную программу 
 
В зависимости от требованиq к программе и соответствующих настроек возможен запуск прогрaмм взаимодействия с последовательным портом либо за счет периодического опроса сотояия флагов ТI и RI, либо с использованием прерываний. 
 Следует заметить , что  фрагмент программы, выполняемой для вывода новых данных или приема и обработки входных данных должен содержать команду сброса флага TI, а программа  приема и обработки входных данных должна содержать команду сброса флага RI. Аппаратных средств  сброса TR и TI( в отличие от других источников запросов) в структуре микроконтроллера не имеется.

1.4. Некоторые особенности  обслуживания прерываний
После появления запроса, прерывания  от которого  разрешены, процессор   по окончанию текущего программного цикла  записывает в стек адрес следующей команды прерываемой программы.  На счетчик адреса команд загружается адрес начала программы обслуживания прерываний.
 В микроконтроллерах семейства 8051 для программ обслуживания зафиксированы постоянные начальные адреса  ( см. далее таблицу). Если в системе возможно обслуживание нескольких прерываний, то программы обслуживания должны "обходить"   участки   программной памяти,  зафиксированные как начальные участки программ обслуживания других прерываний (используется команда JMP).  Всякая программа обслуживания прерываний должна оканчиваться командой RETI (возврат из прерываний) Это команда не только восстанавливает из с

тека состояние счетчика команд, соответствующее моменту начала обслуживания прерываний (как и команда возврата из подпрограмм RET), но и разрешает прерывания равного и низших приоритетов. 
Всякая прерывающая пргорамма должна обеспечить сохранение состояния прерываемой программы. Осмновные подходы к реализации этих фугкций обсуждены в описании работы №2. 
Допускаются вложенные прерывания - то есть программа обслуживания запроса  может быть прервана для обслуживания другого запроса, имеющего более высокий приоритет.  
Микроконтороллеры семейства 8051 имеют весьма гибкую систему управления дисциплиной обслуживания запросов. Дисциплина определяется  состоянием двух регистров управления запросами - регистр масок преваний   IE  и регистр приоритетов прерываний IP. 
 Старший разряд регистра масок ( логическое имя EA либо IE.7) блокирует любые прерывния. Прочие биты осушествляют индивидуальную блокировку  и разрешения прерываний от различных источников ( 1 соответствует разрешению 0 - запрету прерываний).
 Если регистр приоритетов  IP обнулен, до для запросов  установлен следующий порядок приоритетов :
                                   IRO (высший) - TO - IR1 - T1- S INT  ( низший).
Однако,если в регистре  IP несколько разрядов установлены в единицу, то соответствующие запросы получают высший приоритет в сравнении с  любыми запросами, для которых разряды в IR находятся в нулевом состоянии.  Приоритеты запросов среди  отмеченных  одинаковым признаком приоритетности ( например единицами) порядок приоритетов соответствует вышеприведенномую 

Логические имена битов упроавления  и их локализация в соответствующих регистрах, а также векторы прераваний для источников запосов сведены в таблицу:
_______________________________________________________________________________________
Источник запроса         бит блокировки    бит приоритета    начальный адрес
                                                           прorраммы обслуживания
________________________________________________________________________________________
последовательный порт    ES   ( IE.4)        PS (IP.4)              23h
Таймер1                  EТ1  ( IE.3)        PТ1 (IP.3)             1Вh
Вход INT1               EX1   ( IE.2)        PX1 (IP.2)             13h
Таймер 0                 EТ0   ( IE.1)       РТ0 (IP.1)             0Bh
Вход   INT0              EX0   (IE.0)        PX0 (IP.0)             03h
_________________________________________________________________________________________




2. Индивидуальные задания
 Следует подготовит программу, которая содержит главную программ и 2-3 подпрограмм по обслуживанию запросов в соответствии с одним из вариантов, прведенных в таблице 2 по заданию преподавателя. 
В таблице приведены требования к содержанию и способу вызова подпрограмм.
 Используется ТС, номер которого указан в колонке АКТ. ТС( активный таймер-счетчик) который настраивается так, чтобы программа, с ним связанная запускалась периодически каждые 20-30 циклов-используется режим  прерываний с наивысшим приоритетом . Кроие того в колонке "Таймер" задан  режим работы ТС (в подколонке "режим")  и алгоритм программ вызываемой по запросами таймера, причем 
    "-" -  соответствующий запрос не используется;
     z1 -  на выходе Р3.0 генерируется прямоугольный импульсный сигнал, причем длительность импульса м паузы .записаны при начальной настройке и сохраняются в регистрах одного из банков. 
	Реализовать это можно следующим образом. В блоке начальной подготовки программы к запуску кроме установки режима таймера и записи на счетчик длтельности импульса следует установить P3.0 в единицу. Программа, связанная с прерыванием от таймера инверторует Р3.0  и в зависимости от значения  Р3.0 передает на счетчик клд длительности импульса или паузы
     z2- сформировать на порте Р3 пилообразно  с постоянной частотой изменяющийся код.  То есть в начале главной программы на Р3 должен быть должен быть записан нулевой код, а в одном из регистров хранится максимальный. При каждом выхове код на Р3 увеличивается на единцу, а если достигает заданного максимального значения, устанавливается равным нулю. Следует  обеспечить постоянство частоты вызова подпрограммы облуживания.
     z3- то же что в варианте z2,  c тем, что все данные сохраняются в памяти.

В колонках "Готовность приемника" и "готовность передатчика",  ПГ - определяет способ проверки  готовности  и  задает порядок вызова программы обслуживания соответствующего блока последовательного порта, а  "ОП" - операции, которые надо выполнить по готовности данных. При этом обозначено:


            ПГ=1  - вызов программы обработки по прерываниям.
 	ПГ=2   - использование программной петли ожидания готовности;
	ПГ=3   -  периодическая проверка состояния готовности 
	"-" -  соответствующий запрос не используется;

Если ПГ=1,  головная программа после необходимых операций по настройке таймера, порта и регистров управления прерываний входит в бесконечно  повторяющийся цикл, моделирующий некоторую фоновую задачу ( исполняемую при отвутствии каких либо запросов). Это может быть просто последовательность из 5-7 пустых  команд (NOP ), завершающаяся командой безусловного перехода на начало этой последовательности.
Если ПГ=2 ,  головная программа после необходимых операций по настройке таймера, порта и регистров управления прерываний входит в бесконечно  повторяющийся цикл, в начале которого следует    разместить программную петлю ожидания готовности данных на последовательном порте. Фактически такая петля реализуется одной командой - условный переход по состоянию соответствующего бита регистра состояния последовательного порта. Кроме  этой команды  циклический фрагмент программы содержит блок обслуживания обмена и об

работки данных в соответствии  со значением 0П.
Если ПГ=3,  то внутри цикла главной программы, подобной  вышеописанным следует разместиь фрагмент, обеспечивающий проверку состояния порта и вызов подпрограммы обслуживания в случае готовности данных. 
В колонках ОП  обозначено: 
     i1- прочитать байт с последовательного порта, подсчитать, сколько в нем единиц и результат выдать на P3.
     i2- прочитать байт с последовательного порта, определить позицию младшей единицы а результат выдать на P3.
     i3- прочитать байт с последовательного порта, bydthnbhjdfnm dct ytxtnyst ,bns а результат выдать на P3.

   o1-  в каждом цикле вывода передавать выхродной последовательный порт код, отличающийся от предыдущего на единицу младшего разрада . В первом цикле должен  выдаваться нулевой код.
 o2-Прочесть байт с параллельного порта ( например, Р3) , логически домножить его на маску - константу, результат выдать на  последовательный порт
  o3- Передавать на последовательный порт содержимое млажшего байта используемого таймера-счетчика.
  i4,o4 - Байт,  прочиатанный с последовательного порта должен быть логочески умножен на маску ( константу). Результат должен выдаваться на  выход через последовательный порт.  И для ввода и для вывода необходимо проверять готовность порта  используя способ проверки готовности, определенный в колонке ПГ     

							Taблица заданий
No      Таймер         Готовность приемника       Готовность передатчика

   ACT.TC  Режим  ОП    Пг       ОП                    Пг         ОП

1    0       0    z1     -        -                     2         o1

2    0        1   z2     -         -                    3         o2

3    0       2    z3     -         -                    1         o3

4    1       1    z1     1        i1                     -         -

5    1       2    z2     2        i2                     -         -

6    1       0    z3     3        i3                     -         -

7    -       -     -     1        i4                     3         o4

8    -       -     -     2        i4                     3         o4

9    -       -     -     3        i4                     1         o4




3. Порядок выполнения работы

 Порядок выполнения работы и содержание отчета о работе совпадают с соответствующими разделами предыдущих работ

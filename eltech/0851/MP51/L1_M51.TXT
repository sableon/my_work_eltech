Лабораторная работа № 1
Изучение основных команд процессора I8051 и функциями системы моделирования

1. Ведение.
	Цель работы - ознакомление с системой команд однокристального микроконтроллера
семейства i8051 и получение навыков работы в системе отладки.
Система команд микропроцессора и ниболее употребительные директивы асемблера представлены   в разделах помощи системы отладки (см. пункты окна "Помощь" экранного меню).
Для первоначального ознакомления учащийся составляет программу в языке асемблера ( см. варианты заданий)  и выполняет  основные этапы отладки :  редактирование,  компиляцию,  моделирование .  Все этапы работы выполняются посредством вызова соответствующих  действий с помощью экранного меню интегрированной системы отладки, а в процессе моделирования -  выбором соответствующих функций из меню встроенной программы-моделировщика. Продробно поседовательность вызовов представлена в разделе  3 описания настоящей работы - порядок выполнения работы. 
Разрабатывая обучающимся тестовая программа содержит операции счтывания  входных данных  с портов ввода-вывода, обработку считанной информации и выдачу результатов на внешние контакты микроконтроллера.
В работе рассматриваеися таки назаваемы минимальный режим микроконтроллера, то есть без внешней памяти. Для приема и выдачи информации   используются порты ввода-вывода. Порт ввода-вывода содержит регистр для выводимых данных и буфер дла входных данных. Регистр выходных данных может быть загружен комадой  MOV    Pn, A , где n -номер порта, а данные с  линии ввода-вывода прочитаны  командой MOV   A,Pn.  Однако следует иметь в виду, что внешний контакт порта является одновременно и входом и выходом. Фактически на этой линии реализуется операция "монтажного ИЛИ", то есть если внешний источник, подключенный к соответствующему контакту или выходной регистр выдают на линию уровень логического нуля, то состояние линии нулевое, и при считывании с порта прочтется логический ноль.  Иными словами, если порт используется для ввода данных  в выходной ренгистр на время обмена ( а если ввод через этот порт не предусмотрен, то постоянно) должен быть загружен код, содержащий единицу во всех разрядах. Подобно внешние устройства,  подключаемые к портам,     не должны  выдавать активных единичных сигналов на линию передачи данных во время приема.  

	2. Индивидуальные задания/
      Во всех вариантах заданий предусматривается  наличие  циклической головной программ ( 5 - 10 повторений цикла). В каждом цикле  выполняется  считывание данных с одного из портов, вызов подпрограммы преобразования принятых данных  по алгоритму,  заданному преподавателем из числа нижеприведенных, и выдача преобразованного значения на другой порт.
	Вариант 1. В считанном байте анализируется  бит  В7.  Если в нем  0 то передаче на  выходной порт подлежит  исходный байт, ниаче все разрады кроме В7 инвертируются ( эквивалентно переводу в обратный код).  
	Вариант 2. В считанном байте анализируется  бит  В0.  Если в нем  0 то передаче на  выходной порт подлежит  исходный байт, ниаче считанное значение увеличивается на единицу .
	Вариант 3. . В считанном байте переставляются местами В4 и В5.
	Вариант 4.  В считанном байте  сравниваются биты В3 и В7. Если они равны  то на выход передается нулевой код, иначе передается считанное значение 
	Вариант 5.  Если  В считанном байте  в младшей тетраде есть хоть одна единица, то на выходном порте устанавливается в единицу разряд В7, остальные разряды неизменны. 

Замечания:
           - Для подготовки программы требуется знание символики  команд работы с битами и условных переходов - с ней можно ознакомится, используя встроенную в систему отладки текстовую помощь.
           -.  Внутри вызванной подпрограммы рекомендуется установить новый регистровый банк используя  установку или обнуления битов  выбора банка ( напр. SETB     RS0,  CLRB   RS1).
Тогда головная программа и подпрограмма под одинаковыми логическими именами регистров "подразумевают" различные физические ячейки памяти. Такой подход освобождает программиста от проблем защиты регисровой памяти при переходе с одной программы на другую. 
	-. Рекомендуентся  разместить основную часть  программы с адреса не ниже 100Н. Этой основной части должно в асемблерной программе предшествовать директива 
				Org       <начальный адрес>
            Так как порцессор после запуска устанавливает на счеткике команд нулевой код,  программа должна начинаться с перехода на начальный адрес основной части программы ( н.п. LJMP 100H).
            Асемблер допускает   символическое задание меток для команд перехода.

3. Порядок выполнения работы.

3.1. Запустить систему отладки программ для микропроцессора. Выбрать пункт меню"Редактор" и в пункте подменю "имя файла"  объявать имя  исходного модуля отлаживаемой программы  в языке асемблера ( следует использовать расширение ". asm"). Ввести текст приготовленной программы (пункт  подменю "Ввод").
3.2. Выполнить компиляцию программы (п. подменю "Компиляция" в п. меню "Асемблер" ) . Просмотреть текст листинга отладки (файла , имя которого совпадает с именем исходног файла, а расширение  - "lst". Используйте пункт меню"Редактор". При наличии ошибок вернуться к п. 3.1. 
3.3. Выполнить линкирование, используя в пункте меню "Линкер" пункт подменю"Одиночный файл"
        Замечание: если требуется  объединить несколько программных модулей,  следует сначала создать в режиме редактирования файл проекта, объявить это имя   в пункте подменю "файл проекта" линкера  и выполнить   линкирование, используя п. "Линкирование" меню "Линкер".
      Если есть ошибки, перейти к п. 3.1.
3.4. Используя п. меню " Редактор" подготовить текст файла, описывающего последовательность данных, подаваемых на входной порт процессора в режиме моделирования. Рекомендуется использовать расширение ".dat". Файл записывается в форме текста, каждая строка которого представляет значение байта, поступающего на порт в очередном цикле обращения к порту в шестнадцатиричной форме. 
3.5. Преобразовать  файл входных данных в форму представления, принятой в моделировщике. Для этого вызвать п. меню "ввод/вывод"  и подменю "преобразование входного файла". После объявления имени преобразуемого файла  автоматически выполняется преобразование ( создается файл с именем, совпадающий с именем иходного файла данных и расширением "аb" , формат которого соответствует принятому в системе моделирования).
3.6. Запустить программу моделирования ( пункт "Запуск" меню "Симуляция" ). Выбрать версию микроконтроллера ( рекомендуется выбрать вариант В). Ознакомиться с выведенным при этом на экран схематическим отображением микроконтроллера.

3.7. Ввести подготовленную  программу в моделировщик. Для этого 
       а.Последовательно выбрать в командном окне  симулятора  (перемещая курсор стрелками) пункты  "Load"  и "programm". Исполнение действия инициируется клавишей "Enter".
       б. В строку "Enter file name" внисать имя исполняемой программы (имеет имя, совпадающее с именем исходной программы и расширение ".hex". 

 3.8. "Подключить источник входных сигналов" к порту микроконтроллера в следующем порядке:
       а. Выбрать пункт " IO" главного меню симулятора
        б. выбрать функцию "Open" подменю
        в. На запрос"IO input file" Задать имя файла входных данных в строке "Enter file name"     ( имя определено в п.3.5)
         г. на возникший запрос "reply file after EOF" ( повтор входной последовательности после окончания)  выбрать "YES"
        д. на запрос "IO output file"  нажать "Enter" ( временный отказ)
        е. на запрос "IO Trigger"  ( cпособ синхронизации) выбрать "Opcode access" ( задает изменение входа после обращения к выбранному  микроконтроллера к выбранному порту).
        ж. на запрос "IO Transfer" "  определить формат входных данных (выбрать mapByte) и  задать в качестве адреса для ввода логическое имя того порта, с которого в Вашей программе предполагается считывание данных ( например Р1).
 
3.9.  Задать  имя файла для регистрации выходных данных в следующем порядке:
       а. Выбрать пункт " IO" главного меню симулятора
        б. выбрать функцию "Open" подменю
        в. на запрос "IO input file" нажать "Enter" ( временный отказ)
        г. на запрос "IO output file" Задать имя файла входных данных в строке ""Enter file name"   ( имя  произвольно, расширение  ".ah")
        е. на запрос "IO Trigger"  ( cпособ синхронизации) выбрать "Opcode access" ( задает запись состояния выбранного порта  в файл вывода после обращения  микроконтроллера к порту).
        ж. назапрос "IO Transfer" определить формат входных данных (выбрать mapByte)   задать в качестве адреса для вывода логическое имя того порта, на который в Вашей программе предполагается вывод данных ( например Р3).

3.10. Установить на программном счетчике ( РС окна отображения) начальный адрес введенной программы. Переход из командного окна симулятора в окно отображения  и обратно осуществляется нажатием клавиши "ESC", а перемещение внутри окна отображения - стрелками.
3.11. Выполнить один цикл программы в пошаговом режиме: одна команда исполняется по нажатию клавиши F10. Наблюдать изменеия состояния регистров и портов. Убедиться в правильности исполнения алгоритма.
3.12. Выполнить загрузку и начальную прокрутку программы в режиме автоматического создания командного файла отладчика. При этом последовательность нажатия клавиш в сеансе запоминается в этом Файле и может быть повторена без участия пользователя. Режим работы в командным файлом позволяет оперативнее выполнять отладку.  Рекомендуется выполнить пункт 3.12 в следующем порядке:
    a. перейти в командное окно симулятора и выбрать пункт "COMMAND FILE" и подпункт "OPEN";
    б. на запрос "OPEN FILE NAME" задать имя командного файла, в котором  будет сохраняться последовательность действий.
    в. выполнить типову последовательность действий: В данной работе рекомендуетсяповторить п.п. 3.7 - 3. 10.
    г. закрыть командный файл: перейти в командное окно симулятора и выбрать пункт "COMMAND FILE" и подпункт "close".

3.13. Окончить сеанс моделирования: В командном окне симулятора  последовытельно выбрать пункты  "QUIT" и "EXIT".
3.14. Если  при выолнении п 3.11 обнаружены ошибки повторить пп 3.1 - 3.3  

3.15. Запустить симулятор под управлением командного файла. для этого:
     а. Окне системы отладки "симулятор" выбрать путк "Командный файл" и ввести его имя ( должно совпадать с определенным в п 3.13.б ).
     б. Выполнить запуск симулятора. Все действия по ппю 3.7-3.10 выполнятся автоматически.
3.16. Продолжить отладку программммы в  автоматическом режиме с точками останова. При этом клавишами F2 и F4 курсор -указатель точки останова перемещается вдоль окна текста программы вверх или вниз. Точка останова фиксируется нажатием клавиши F3.  Выполнить несколько циклов. разместив точку останова на одном из последних операторов  в цикле. Наблюдая состояния регистров и портов, убедится в правильности выполнения программы.
3.17 Если обнаружены ошибки выпонить повторно п.п 3.1 -3.3 . 3.16- 3.18.
 
4.  Содержание отчета
4.1. Описание и блок схема алгоритма.
4.2. Текст программы
4.3.  Таблица трассировки .
4.4. Текст входного и выходного файлов.



